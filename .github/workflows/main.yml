name: Build and Deploy

on:
  push:
    branches:
      - develop
      - pre-prod
      - prod

jobs:
  determine_server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 staging-controller.furtherreach.net >> ~/.ssh/known_hosts

      - name: Set environment variables based on branch
        run: |
          branch_name=${{ github.ref_name }}
          case "$branch_name" in
            "develop")
              echo "SERVER_URL=$DEVELOP_URL" >> $GITHUB_ENV
              echo "SERVER_USER=$DEVELOP_USER" >> $GITHUB_ENV
              ;;
            "pre-prod")
              echo "SERVER_URL=${{ secrets.PRE_PROD_URL }}" >> $GITHUB_ENV
              echo "SERVER_USER=${{ secrets.PRE_PROD_USER }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "SERVER_URL=${{ secrets.PROD_URL }}" >> $GITHUB_ENV
              echo "SERVER_USER=${{ secrets.PROD_USER }}" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown branch: $branch_name"
              exit 1
              ;;
          esac

      - name: Create timestamp file on server
        run: |
          ssh -p 22 ${{ env.SERVER_USER }}@${{ env.SERVER_URL }} "echo '${{ github.ref_name }} - $DEVELOP_USER@$DEVELOP_URL - $(date)' > /tmp/timestamp.txt"

  # Commented jobs for future use
  # checkout_and_archive:
  #   runs-on: ubuntu-latest
  #   needs: determine_server
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #
  #     - name: Install Meteor
  #       run: |
  #         curl https://install.meteor.com/ | sh
  #
  #     - name: Install dependencies
  #       run: |
  #         cd external-controller
  #         npm install
  #
  #     - name: Build project
  #       run: |
  #         cd external-controller
  #         meteor build --directory /tmp/build --server-only --allow-superuser
  #
  #     - name: Archive and transfer build to server
  #       run: |
  #         tar -czf - -C /tmp build | ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_URL }} 'cat > /tmp/build.tar.gz'
  #
  # extract_and_set_permissions:
  #   runs-on: ubuntu-latest
  #   needs: checkout_and_archive
  #   steps:
  #     - name: Extract build on server and set permissions
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_URL }} "
  #           sudo su - controller -c 'rm -rf /home/controller/CICD || true'
  #           sudo su - controller -c 'mkdir -p /home/controller/CICD'
  #           sudo su - controller -c 'tar -xzvf /tmp/build.tar.gz -C /home/controller/CICD'
  #           sudo su - controller -c 'sudo chown -R controller:controller /home/controller/CICD'
  #         "
  #
  # cleanup:
  #   runs-on: ubuntu-latest
  #   needs: extract_and_set_permissions
  #   steps:
  #     - name: Cleanup local and server temporary files
  #       run: |
  #         rm -rf /tmp/build
  #         ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_URL }} "
  #           sudo rm -rf /tmp/build.tar.gz
  #         "
  #
  # backup_and_deploy:
  #   runs-on: ubuntu-latest
  #   needs: cleanup
  #   steps:
  #     - name: Backup current implementation and deploy new build
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_URL }} "
  #           sudo su - controller
  #           mv /home/controller/controllerBundle/external-controller.tar.gz /home/controller/controllerBundle/external-controller.tar.gz.$(date +%Y%m%d_%H%M%S)
  #           mv /home/controller/controllerBundle/bundleOld /home/controller/controllerBundle/bundleOld.$(date +%Y%m%d_%H%M%S)
  #           mv /home/controller/controllerBundle/bundle /home/controller/controllerBundle/bundleOld
  #           mkdir -p /home/controller/controllerBundle/bundle
  #           cp -r /home/controller/CICD/build/bundle/* /home/controller/controllerBundle/bundle
  #           npm install /home/controller/controllerBundle/bundle/programs/server
  #           sudo chown -R controller:controller /home/controller/controllerBundle
  #           sudo systemctl stop celerate-controller
  #           sudo systemctl start celerate-controller
  #         "
